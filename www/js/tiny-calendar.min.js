'use strict';

angular.module('angular-tiny-calendar', []).directive('tinyCalendar', [function() {


    function removeTime(date) {
        return date.startOf('day');
    }

    function firstSelected(month, date) {
        var s = null;
        for (var i = 0; i < month.length; i++) {
            if (date && month[i].date === date) {
                s = month[i];
                break;
            } else if (!date && month[i].isToday) {
                s = month[i];
                break;
            }
        }
        return s;
    }

    function buildMonth(start, events, firstDay) {
        if (!firstDay || isNaN(firstDay)) {
            firstDay = 0;
        }
        var days = [];
        var date = removeTime(start.clone().date(0).day(firstDay));

        for (var i = 0; i < 42; i++) {
            days.push({
                number: date.date(),
                isCurrentMonth: date.month() === start.month(),
                isToday: date.isSame(moment().format(), 'day'),
                date: date.format('YYYY-MM-DD'),
            });
            date = date.clone();
            date.add(1, 'd');
        }
        return addEvents(days, events);
    }


    function addEvents(month, events) {
        if (!events) {
            return month;
        }
        return month.map(function(day) {
            var ev = [];
            var d = moment(day.date);
            events.forEach(function(event) {
                var s = removeTime(moment(event.startDate));
                var e = event.endDate ? removeTime(moment(event.endDate)) : s.clone();
                if (moment().range(s, e).contains(d)) {

                    ev.push(event);
                }
            });
            if (ev.length > 0) {
                day.events = ev;
            }
            return day;
        });
    }

    return {
        restrict: 'A',
        scope: {
            events: '='
        },

        // replace: true,
        template: function(element, attrs) {
            var defaultsAttrs = {
                weekDays: 'SMTWTFS',
                today: 'today',
                allDayLabel: 'All day',
                firstDay: 0
            };
            for (var xx in defaultsAttrs) {
                if (attrs[xx] === undefined) {
                    attrs[xx] = defaultsAttrs[xx];
                }
            }

            attrs.weekDays = attrs.weekDays.split('').slice(0, 7);
            if (attrs.firstDay) {
                attrs.weekDays = attrs.weekDays.slice(attrs.firstDay).concat(attrs.weekDays.slice(0, attrs.firstDay));
            }
            attrs.weekDays = '[' + attrs.weekDays.map(function(day) {
                return '"' + day + '"';
            }).join(',').replace('"', '&quot;') + ']';

            var html = "<div class='tc-container'>";
            html += "<div class='tc-header'>{{currentMonth.format('MMMM YYYY')}}";
            html += "<div class='tc-navigation'>";
            html += "<button ng-click='previous()' class='ion-ios-arrow-back btn-change-month'></button>";
            html += "<button ng-click='today()'>" + attrs.today + "</button>";
            html += "<button ng-click='next()' class='ion-ios-arrow-forward btn-change-month'></button>";
            html += "</div>";
            html += "</div>";
            html += "<div class='tc-days-name'>";
            html += "<div class='tc-day-name' ng-repeat='wd in " + attrs.weekDays + " track by $index'>{{wd}}</div>";
            html += "</div>";
            html += "<div class='tc-days'>";
            html += "<div ng-if='userType==0' ng-repeat='day in month' class='tc-day' ng-class='{ differentMonth: !day.isCurrentMonth, statusPink: day.events.length > 0}' ng-click='select(day)'>{{day.number}}</div>";
            html += "<div ng-if='userType==1' ng-repeat='day in month' class='tc-day' ng-class='{ differentMonth: !day.isCurrentMonth, statusBlue: day.events.length > 0 && day.events[0].status==0, statusGreen: day.events.length > 0 && day.events[0].status==1}' ng-click='select(day)'>{{day.number}}</div>";
            //html += "<div ng-if='userType==1' ng-repeat='day in month' class='tc-day' ng-class='{ today: day.isToday, differentMonth: !day.isCurrentMonth, selected: day.date === selected.date, hasEvents: day.events.length > 0}' ng-click='select(day)'>{{day.number}}</div>";
            html += "</div>";
            html += "<div class='list' ng-class='{ listClient: userType==0, listCaregiver: userType==1}'>";
            html += "<ion-item ng-if='userType==0' ng-repeat='e in events | orderBy:&quot;date&quot;' class='item item-avatar'><img src='img/days.svg'><h2>{{e.startDate | date: 'dd/MM/yyyy'}}</h2><p><span>Status:</span> {{e.status==1 ? 'Agendado e aprovado':'Aguardando cuidador'}}</p></ion-item>";
            html += "<ion-item ng-if='userType==1' ng-repeat='e in events | orderBy:&quot;date&quot;' class='item item-icon-left item-icon-right'><i ng-class='{statusBlue: e.status==0,statusGreen: e.status==1}'>{{e.startDate | date: 'dd'}}</i>{{e.status==1 ? 'Status: Proposta Aprovada':'Status: Oferta Feita'}} <i class='icon ion-ios-arrow-right icon-right'></i></ion-item>";

            //html += "<li ng-repeat='e in events | orderBy:&quot;date&quot;'><span class='tc-time icons icon-days' ng-show='e.time'>{{e.startDate | date: 'dd'}}</span><span class='tc-time' ng-hide='e.time'>" + attrs.allDayLabel + "</span><span class='tc-title'>{{e.status==1 ? 'Proposta Aprovada':'Oferta Feita'}}</span></li>";

            html += "</div>";
            html += "</div>";

            return html;
        },

        link: function(scope, el, attrs) {
            var today = moment().format();
            scope.currentMonth = moment();
            var start = scope.currentMonth.clone();
            scope.userType = localStorage.getItem('user_type');
            scope.month = buildMonth((start), scope.events, attrs.firstDay);

            scope.selected = firstSelected(scope.month);
            scope.select = function(day) {
                console.log(day);
                if (day.isCurrentMonth) {
                    scope.selected = day;
                } else {
                    scope.currentMonth = moment(day.date);
                    scope.month = buildMonth(scope.currentMonth, scope.events, attrs.firstDay);
                    scope.selected = firstSelected(scope.month, day.date);
                }


            };

            scope.today = function() {
                scope.currentMonth = moment(today);
                scope.month = buildMonth(scope.currentMonth, scope.events, attrs.firstDay);
                scope.selected = firstSelected(scope.month, removeTime(scope.currentMonth).format());
            };

            scope.previous = function() {
                scope.selected = null;
                scope.currentMonth.subtract(1, 'months');
                scope.month = buildMonth(scope.currentMonth, scope.events, attrs.firstDay);

            };

            scope.next = function() {
                scope.selected = null;
                scope.currentMonth.add(1, 'months');
                scope.month = buildMonth(scope.currentMonth, scope.events, attrs.firstDay);
            };


        }

    };
}]);